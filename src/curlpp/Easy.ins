/*
 * Use 
 * Find what: "typedef.*?\n?.*?\n?.*>\s*(.*);" regex and
 * Replace with: "template void Easy::setOpt<options::$1>(options::$1::ParamType);" regex
 * to generate this file from Options.hpp header file.
 */

#include <iostream> 

#include "curlpp/Easy.hpp"
#include "curlpp/Options.hpp"

#ifdef CURLPP_ALLOW_NOT_AVAILABLE
#define DEF_IF_ALLOW_AVAILABLE (type,option,name) typedef curlpp::NotAvailableOptionTrait<type, option> name;
#endif

// #begin define OPTION(version,type,option,name) 
// #if LIBCURL_VERSION_NUM >= version 
//   typedef curlpp::OptionTrait<type, option> name;
// #else
// DEF_IF_ALLOW_AVAILABLE(type,option,name)
// #endif
// #end


namespace curlpp
{

	/**
     * Cookie interface.
     */

#if LIBCURL_VERSION_NUM >= 0x070d01
	template
	void Easy::setOpt<options::CookieList>(options::CookieList::ParamType);
#else
#ifdef CURLPP_ALLOW_NOT_AVAILABLE
    template
	void Easy::setOpt<options::CookieList>(options::CookieList::ParamType);
#endif
#endif

	/**
     * Behavior options.
     */

	template 
	void Easy::setOpt<options::Verbose>(options::Verbose::ParamType);
    template 
	void Easy::setOpt<options::Header>(options::Header::ParamType);
#if LIBCURL_VERSION_NUM >= 0x070A00
    template 
	void Easy::setOpt<options::NoSignal>(options::NoSignal::ParamType);
#else
#ifdef CURLPP_ALLOW_NOT_AVAILABLE
    template 
	void Easy::setOpt<options::NoSignal>(options::NoSignal::ParamType);
#endif // CURLPP_ALLOW_NOT_AVAILABLE
#endif // LIBCURL_VERSION_NUM

    template 
void Easy::setOpt<options::NoProgress>(options::NoProgress::ParamType);
    
    /**
     * Callback options. 
     */

	template 
	void Easy::setOpt<options::WriteFunction>(options::WriteFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostWriteFunction>(options::BoostWriteFunction::ParamType);
#endif

    /**
     * Using this option will reset CURLOPT_WRITEFUNCTION to 
     * default callback. In fact, use only this option if you only 
     * want libcURL to use the FILE * given in argument instead 
     * of stdout. 
     */

#if LIBCURL_VERSION_NUM >= 0x070907
    template 
	void Easy::setOpt<options::WriteFile>(options::WriteFile::ParamType);
    template 
	void Easy::setOpt<options::WriteStream>(options::WriteStream::ParamType);
#else
#ifdef CURLPP_ALLOW_NOT_AVAILABLE
    template 
void Easy::setOpt<options::WriteFile>(options::WriteFile::ParamType);
    template 
	void Easy::setOpt<options::WriteStream>(options::WriteStream::ParamType);
#endif // CURLPP_ALLOW_NOT_AVAILABLE
#endif // LIBCURL_VERSION_NUM


#if LIBCURL_VERSION_NUM >= 0x070c01
    template 
	void Easy::setOpt<options::ReadFunction>(options::ReadFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostReadFunction>(options::BoostReadFunction::ParamType);
#endif
#else
#ifdef CURLPP_ALLOW_NOT_AVAILABLE
    template 
	void Easy::setOpt<options::ReadFunction>(options::ReadFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostReadFunction>(options::BoostReadFunction::ParamType);
#endif // HAVE_BOOST
#endif // CURLPP_ALLOW_NOT_AVAILABLE
#endif // LIBCURL_VERSION_NUM

    /**
     * Using this option will reset CURLOPT_READFUNCTION to 
     * default callback. In fact, use only this option if you only 
     * want libcURL to use the FILE * given in argument instead 
     * of stdout. 
     */

#if LIBCURL_VERSION_NUM >= 0x070907
    template 
	void Easy::setOpt<options::ReadFile>(options::ReadFile::ParamType);
    template 
	void Easy::setOpt<options::ReadStream>(options::ReadStream::ParamType);
#else
#ifdef CURLPP_ALLOW_NOT_AVAILABLE
    template 
	void Easy::setOpt<options::ReadFile>(options::ReadFile::ParamType);
    template 
	void Easy::setOpt<options::ReadStream>(options::ReadStream::ParamType);
#endif // CURLPP_ALLOW_NOT_AVAILABLE
#endif // LIBCURL_VERSION_NUM

    template 
	void Easy::setOpt<options::ProgressFunction>(options::ProgressFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostProgressFunction>(options::BoostProgressFunction::ParamType);
#endif

    template 
	void Easy::setOpt<options::HeaderFunction>(options::HeaderFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostHeaderFunction>(options::BoostHeaderFunction::ParamType);
#endif

    template 
	void Easy::setOpt<options::DebugFunction>(options::DebugFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostDebugFunction>(options::BoostDebugFunction::ParamType);
#endif

    template 
	void Easy::setOpt<options::SslCtxFunction>(options::SslCtxFunction::ParamType);

#ifdef HAVE_BOOST
    template 
	void Easy::setOpt<options::BoostSslCtxFunction>(options::BoostSslCtxFunction::ParamType);
#endif
    
      
    /**
     * Error options.
     */

	template 
	void Easy::setOpt<options::ErrorBuffer>(options::ErrorBuffer::ParamType);

#ifdef FILE
    template 
	void Easy::setOpt<options::StdErr>(options::StdErr::ParamType);
#endif

	template 
	void Easy::setOpt<options::FailOnError>(options::FailOnError::ParamType);

    /**
     * Network options.
     */

	template 
	void Easy::setOpt<options::Url>(options::Url::ParamType);
    template 
	void Easy::setOpt<options::Proxy>(options::Proxy::ParamType);
    template 
	void Easy::setOpt<options::ProxyPort>(options::ProxyPort::ParamType);
    template 
	void Easy::setOpt<options::ProxyType>(options::ProxyType::ParamType);
    template 
	void Easy::setOpt<options::HttpProxyTunnel>(options::HttpProxyTunnel::ParamType);
    template 
	void Easy::setOpt<options::Interface>(options::Interface::ParamType);
    template 
	void Easy::setOpt<options::DnsCacheTimeout>(options::DnsCacheTimeout::ParamType);
    template 
	void Easy::setOpt<options::DnsUseGlobalCache>(options::DnsUseGlobalCache::ParamType);
    template 
	void Easy::setOpt<options::BufferSize>(options::BufferSize::ParamType);
    template 
	void Easy::setOpt<options::Port>(options::Port::ParamType);

	template 
	void Easy::setOpt<options::TcpNoDelay>(options::TcpNoDelay::ParamType);

    /**
     * Names and passwords options.
     */

	template 
	void Easy::setOpt<options::Netrc>(options::Netrc::ParamType);
    template 
	void Easy::setOpt<options::NetrcFile>(options::NetrcFile::ParamType);
    template 
	void Easy::setOpt<options::UserPwd>(options::UserPwd::ParamType);
    template 
	void Easy::setOpt<options::ProxyUserPwd>(options::ProxyUserPwd::ParamType);
    template 
	void Easy::setOpt<options::HttpAuth>(options::HttpAuth::ParamType);
    template 
	void Easy::setOpt<options::ProxyAuth>(options::ProxyAuth::ParamType);

    /**
     * HTTP options.
     */

	template 
	void Easy::setOpt<options::AutoReferer>(options::AutoReferer::ParamType);
    template 
	void Easy::setOpt<options::Encoding>(options::Encoding::ParamType);
    template 
	void Easy::setOpt<options::FollowLocation>(options::FollowLocation::ParamType);
    template 
	void Easy::setOpt<options::UnrestrictedAuth>(options::UnrestrictedAuth::ParamType);
    template 
	void Easy::setOpt<options::MaxRedirs>(options::MaxRedirs::ParamType);
    template 
	void Easy::setOpt<options::Put>(options::Put::ParamType);
    template 
	void Easy::setOpt<options::Upload>(options::Upload::ParamType);
    template 
	void Easy::setOpt<options::Post>(options::Post::ParamType);
    template 
	void Easy::setOpt<options::PostFields>(options::PostFields::ParamType);
    template 
	void Easy::setOpt<options::PostFieldSize>(options::PostFieldSize::ParamType);
    template 
	void Easy::setOpt<options::PostFieldSizeLarge>(options::PostFieldSizeLarge::ParamType);
    template 
	void Easy::setOpt<options::HttpPost>(options::HttpPost::ParamType);
    template 
	void Easy::setOpt<options::Referer>(options::Referer::ParamType);
    template 
	void Easy::setOpt<options::UserAgent>(options::UserAgent::ParamType);
    template 
	void Easy::setOpt<options::HttpHeader>(options::HttpHeader::ParamType);
    template 
	void Easy::setOpt<options::Http200Aliases>(options::Http200Aliases::ParamType);
    template 
	void Easy::setOpt<options::Cookie>(options::Cookie::ParamType);
    template 
	void Easy::setOpt<options::CookieFile>(options::CookieFile::ParamType);
    template 
	void Easy::setOpt<options::CookieJar>(options::CookieJar::ParamType);
    template 
	void Easy::setOpt<options::CookieSession>(options::CookieSession::ParamType);
    template 
	void Easy::setOpt<options::HttpGet>(options::HttpGet::ParamType);
    template 
	void Easy::setOpt<options::HttpVersion>(options::HttpVersion::ParamType);

    /**
     * FTP options.
     */

	template 
	void Easy::setOpt<options::FtpPort>(options::FtpPort::ParamType);
    template 
	void Easy::setOpt<options::Quote>(options::Quote::ParamType);
    template 
	void Easy::setOpt<options::PostQuote>(options::PostQuote::ParamType);
    template 
	void Easy::setOpt<options::PreQuote>(options::PreQuote::ParamType);
    template 
	void Easy::setOpt<options::FtpListOnly>(options::FtpListOnly::ParamType);
    template 
	void Easy::setOpt<options::FtpAppend>(options::FtpAppend::ParamType);
    template 
	void Easy::setOpt<options::FtpUseEpsv>(options::FtpUseEpsv::ParamType);
    template 
	void Easy::setOpt<options::FtpFileMethod>(options::FtpFileMethod::ParamType);
    template 
	void Easy::setOpt<options::FtpCreateMissingDirs>(options::FtpCreateMissingDirs::ParamType);
    template 
	void Easy::setOpt<options::FtpResponseTimeout>(options::FtpResponseTimeout::ParamType);
    template 
	void Easy::setOpt<options::FtpSsl>(options::FtpSsl::ParamType);
    template 
	void Easy::setOpt<options::FtpSslAuth>(options::FtpSslAuth::ParamType);
      
    /**
     * Protocol options.
     */

	template 
	void Easy::setOpt<options::TransferText>(options::TransferText::ParamType);
    template 
	void Easy::setOpt<options::Crlf>(options::Crlf::ParamType);
    template 
	void Easy::setOpt<options::Range>(options::Range::ParamType);
    template 
	void Easy::setOpt<options::ResumeFrom>(options::ResumeFrom::ParamType);
    template 
	void Easy::setOpt<options::ResumeFromLarge>(options::ResumeFromLarge::ParamType);
    template 
	void Easy::setOpt<options::CustomRequest>(options::CustomRequest::ParamType);
    template 
	void Easy::setOpt<options::FileTime>(options::FileTime::ParamType);
    template 
	void Easy::setOpt<options::NoBody>(options::NoBody::ParamType);
    template 
	void Easy::setOpt<options::InfileSize>(options::InfileSize::ParamType);
    template 
	void Easy::setOpt<options::InfileSizeLarge>(options::InfileSizeLarge::ParamType);
    template 
	void Easy::setOpt<options::MaxFileSize>(options::MaxFileSize::ParamType);
    template 
	void Easy::setOpt<options::MaxFileSizeLarge>(options::MaxFileSizeLarge::ParamType);
    template 
	void Easy::setOpt<options::TimeCondition>(options::TimeCondition::ParamType);
    template 
	void Easy::setOpt<options::TimeValue>(options::TimeValue::ParamType);

    /**
     * Connection options.
     */
    
	template 
	void Easy::setOpt<options::Timeout>(options::Timeout::ParamType);
    template 
	void Easy::setOpt<options::LowSpeedLimit>(options::LowSpeedLimit::ParamType);
    template 
	void Easy::setOpt<options::LowSpeedTime>(options::LowSpeedTime::ParamType);
    template 
	void Easy::setOpt<options::MaxConnects>(options::MaxConnects::ParamType);
    template 
	void Easy::setOpt<options::ClosePolicy>(options::ClosePolicy::ParamType);
    template 
	void Easy::setOpt<options::FreshConnect>(options::FreshConnect::ParamType);
    template 
	void Easy::setOpt<options::ForbidReuse>(options::ForbidReuse::ParamType);
    template 
	void Easy::setOpt<options::ConnectTimeout>(options::ConnectTimeout::ParamType);
    template 
	void Easy::setOpt<options::IpResolve>(options::IpResolve::ParamType);
      
    /**
     * SSL and security options.
     */

	template 
	void Easy::setOpt<options::SslCert>(options::SslCert::ParamType);
    template 
	void Easy::setOpt<options::SslCertType>(options::SslCertType::ParamType);
    template 
	void Easy::setOpt<options::SslCertPasswd>(options::SslCertPasswd::ParamType);
    template 
	void Easy::setOpt<options::SslKey>(options::SslKey::ParamType);
    template 
	void Easy::setOpt<options::SslKeyType>(options::SslKeyType::ParamType);
    template 
	void Easy::setOpt<options::SslKeyPasswd>(options::SslKeyPasswd::ParamType);
    template 
	void Easy::setOpt<options::SslEngine>(options::SslEngine::ParamType);
    template 
	void Easy::setOpt<options::SslEngineDefault>(options::SslEngineDefault::ParamType);
    template 
	void Easy::setOpt<options::SslVersion>(options::SslVersion::ParamType);
    template 
	void Easy::setOpt<options::SslVerifyPeer>(options::SslVerifyPeer::ParamType);
    template 
	void Easy::setOpt<options::CaInfo>(options::CaInfo::ParamType);
    template 
	void Easy::setOpt<options::CaPath>(options::CaPath::ParamType);
    template 
	void Easy::setOpt<options::RandomFile>(options::RandomFile::ParamType);
    template 
	void Easy::setOpt<options::EgdSocket>(options::EgdSocket::ParamType);
    template 
	void Easy::setOpt<options::SslVerifyHost>(options::SslVerifyHost::ParamType);
    template 
	void Easy::setOpt<options::SslCipherList>(options::SslCipherList::ParamType);
    template 
	void Easy::setOpt<options::Krb4Level>(options::Krb4Level::ParamType);

    /**
     * Others options.
     */

	template 
	void Easy::setOpt<options::Private>(options::Private::ParamType);
    template 
	void Easy::setOpt<options::Krb4Level>(options::Krb4Level::ParamType);

	//Share;
    //TelnetOptions

} // namespace curlpp

#include "./Easy.custom.ins"
